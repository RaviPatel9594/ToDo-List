{"version":3,"sources":["todos.js","AddTodos.js","App.js","serviceWorker.js","index.js"],"names":["Todos","todos","deleteTodo","console","log","todoList","length","map","todo","className","key","id","onClick","content","AddTodos","state","handleOnChange","e","setState","Math","random","target","value","handleOnClick","preventDefault","props","addTodo","onSubmit","this","type","name","placeholder","onChange","React","Component","App","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uNAkBeA,EAhBA,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAMC,EAAe,EAAfA,WACnBC,QAAQC,IAAIH,GACZ,IAAII,EAASJ,EAAMK,OAAUL,EAAMM,KAAI,SAAAC,GACnC,OACA,yBAAKC,UAAU,mCAAmCC,IAAKF,EAAKG,IACxD,0BAAMC,QAAS,WAAKV,EAAWM,EAAKG,MAAOH,EAAKK,aAIxD,yBAAKJ,UAAU,oCAAf,2BACA,OACI,yBAAKA,UAAU,UACVJ,ICmBES,E,2MA9BXC,MAAM,CACFJ,GAAG,KACHE,QAAQ,I,EAGZG,eAAe,SAACC,GACb,EAAKC,SAAS,CACVP,GAAGQ,KAAKC,SACRP,QAAQI,EAAEI,OAAOC,QAErBnB,QAAQC,IAAI,EAAKW,Q,EAEpBQ,cAAc,SAACN,GACXA,EAAEO,iBACF,EAAKC,MAAMC,QAAQ,EAAKX,OACxB,EAAKG,SAAS,CACVL,QAAQ,M,wEAIZ,OACI,yBAAKJ,UAAU,oCACX,0BAAMkB,SAAUC,KAAKL,eACjB,2BAAOM,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAAYT,MAAOM,KAAKb,MAAMF,QAASmB,SAAUJ,KAAKZ,iBACjG,6C,GAzBGiB,IAAMC,WCqCdC,E,2MAlCbpB,MAAM,CACJd,MAAM,CACJ,CAACU,GAAG,EAAGE,QAAQ,cACf,CAACF,GAAG,EAAGE,QAAQ,iB,EAGnBa,QAAS,SAAClB,GACR,IAAIP,EAAM,GAAD,mBAAM,EAAKc,MAAMd,OAAjB,CAAuBO,IAChC,EAAKU,SAAS,CACZjB,MAAMA,K,EAGVC,WAAW,SAACS,GACV,IAAIV,EAAM,EAAKc,MAAMd,MAAMmC,QAAO,SAAA5B,GAChC,OAAOA,EAAKG,KAAKA,KAEnB,EAAKO,SAAS,CACZjB,W,wEAMF,OACE,yBAAKQ,UAAU,mCACb,wBAAIA,UAAU,mDAAd,iBACA,kBAAC,EAAD,CAAOR,MAAO2B,KAAKb,MAAMd,MAAOC,WAAY0B,KAAK1B,aACjD,kBAAC,EAAD,CAAUwB,QAASE,KAAKF,UACxB,uBAAGjB,UAAU,wBAAuB,qEAA0C,8BAAc,wCAAa,6BAAb,oCAAuD,6BAAvD,wD,GA7BlFwB,IAAMC,WCQJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c8990350.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Todos  = ({todos,deleteTodo}) =>{\r\n    console.log(todos);\r\n    let todoList=todos.length ?  todos.map(todo=>{\r\n        return(\r\n        <div className=\"container center collection-item\" key={todo.id}>\r\n            <span onClick={()=>{deleteTodo(todo.id)}}>{todo.content}</span>\r\n        </div>\r\n        )\r\n    }) : \r\n    <div className=\"container center collection-item\">you have no todo's left</div>;\r\n    return(\r\n        <div className=\"center\">\r\n            {todoList}\r\n        </div>\r\n    )\r\n}\r\nexport default Todos;","import React from 'react';\r\n\r\nclass AddTodos extends React.Component{\r\n    state={\r\n        id:null,\r\n        content:''\r\n    }\r\n\r\n    handleOnChange=(e)=>{\r\n       this.setState({\r\n           id:Math.random(),\r\n           content:e.target.value\r\n       })\r\n       console.log(this.state);\r\n    }\r\n    handleOnClick=(e)=>{\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state)\r\n        this.setState({\r\n            content:''\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"container center collection-item\">\r\n                <form onSubmit={this.handleOnClick}>\r\n                    <input type=\"text\" name=\"todo\" placeholder=\"Add Todos\" value={this.state.content} onChange={this.handleOnChange} />\r\n                    <button >Add</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n} \r\nexport default AddTodos;","import React from 'react';\nimport Todos from './todos.js';\nimport AddTodos from './AddTodos';\n\nclass App extends React.Component {\n  state={\n    todos:[\n      {id:1, content:\"drink milk\"},\n      {id:2, content:\"drink water\"}\n    ]\n  }\n  addTodo= (todo)=>{\n    let todos= [...this.state.todos,todo]\n    this.setState({\n      todos:todos\n    })\n  }\n  deleteTodo=(id)=>{ \n    let todos=this.state.todos.filter(todo => {\n      return todo.id!==id;\n    })\n    this.setState({\n      todos\n    })\n  }\n\n  render(){\n\n    return (\n      <div className=\"App center collection container\">\n        <h1 className=\"center grey darken-2 white-text text-lighten-1 \">List of todos</h1>\n        <Todos todos={this.state.todos} deleteTodo={this.deleteTodo} />\n        <AddTodos addTodo={this.addTodo} />\n        <p className=\"red center lighten-3\"><h3>A Simple Todo applicatipn using react:<br></br></h3><h4>Features:<br></br>1.add todos by submiting the form<br></br>2.click on any todo to remove it from the list</h4></p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}